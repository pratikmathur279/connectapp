service: connectapp # NOTE: update this with your service name
#app: your-app-name
#tenant: your-tenant-name

custom:
  webpackIncludeModules:
    forceInclude:
      - request

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    USERS_TABLE: { "Ref": "UsersDynamoTable" } 
    CHATS_TABLE: { "Ref": "ChatsDynamoTable"}
    MESSAGES_TABLE: { "Ref": "MessagesDynamoTable"}
    ONLINE_TABLE: { "Ref": "OnlineDynamoTable"}
    EMAIL: "pratikmathur279@gmail.com"

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
        - lambda:InvokeAsync
      Resource: "*"

    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - { "Fn::GetAtt": ["ChatsDynamoTable", "Arn"] }
        - { "Fn::GetAtt": ["MessagesDynamoTable", "Arn"] }
        - { "Fn::GetAtt": ["UsersDynamoTable", "Arn"] }
        - { "Fn::GetAtt": ["OnlineDynamoTable", "Arn"] }

    - Effect: "Allow"
      Action:
        - "ses:SendEmail"
      Resource: "*"


functions:
  hello:
    handler: handler.hello
    events:
      - http:
          path: hello
          method: get
          cors: true

  createUser:
    handler: auth/createUser.add
    events:
      - http:
          path: register
          method: post
          cors: true

  getUsers:
    handler: auth/getUsers.list
    events:
      - http:
          path: getUsers
          method: get
          cors: true

#check if user is authenticated
  checkUserAuth:
    handler: auth/checkUserAuth.check
    events:
      - http:
          path: login
          method: post
          cors: true

#post messages
  sendMessage:
    handler: message/sendMessage.send
    events:
      - http:
          path: message
          method: post
          cors: true

  getMessages:
    handler: message/getMessages.list
    events:
      - http:
          path: messages
          method: get
          cors: true

  createChat:
    handler: chats/createChat.create
    events:
      - http:
          path: createChat
          method: post
          cors: true

  getChats:
    handler: chats/getChats.list
    events:
      - http:
          path: chats
          method: get
          cors: true

  userOnline:
    handler: user/online.online
    events:
      - http:
          path: online
          method: post
          cors: true

  userOffline:
    handler: user/offline.delete
    events:
      - http:
          path: offline/{id}
          method: delete
          cors: true
          
resources:
  Resources:
    ChatsDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-chats

    OnlineDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-online

    MessagesDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-messages
    
    UsersDynamoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Delete
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:service}-users